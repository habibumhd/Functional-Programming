# -*- coding: utf-8 -*-
"""Latihan Praktikum Modul 4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12JTXTJGCJd-GC8ouFg46J2HSvQ4rOViq
"""

# Latihan Praktikum Modul 4
# Kegiatan 1

# curry function
def perkalian(a):
    def dengan(b):
        return a * b
    return dengan

# cara memanggilnya:
# 1. HOF
kali_dua = perkalian(2)
print(kali_dua(3))

# 2. currying
print(perkalian(2)(3))

# Latihan Praktikum Modul 4
# Kegiatan 2

def uppercase_decorator(function):
    def wrapper():
        func_result = function()
        return func_result.upper()
    return wrapper

@uppercase_decorator
def say_hi():
    return 'hello there'

result = say_hi()
print(result)

# Latihan Praktikum Modul 4
# Kegiatan 3

def title_decorator(function):
    def wrapper():
        func_result = function()
        make_title = func_result.title()
        print(make_title + " -Data is convert to title case")
        return make_title
    return wrapper

def split_string(function):
    def wrapper():
        func_result = function()
        splitted_string = func_result.split()
        print(str(splitted_string) + " - Then Data is splitted")
        return splitted_string
    return wrapper

@split_string
@title_decorator
def say_hi():
    return 'hello there'

result = say_hi()
print(result)

# Latihan Praktikum Modul 4
# Kegiatan 4

import math

# titik awal
P = (3, 5)

# fungsi translasi
def translasi(tx, ty):
    def transformasi(P):
        return (P[0] + tx, P[1] + ty)
    return transformasi

# fungsi dilatasi
def dilatasi(sx, sy):
    def transformasi(P):
        return (P[0] * sx, P[1] * sy)
    return transformasi

# fungsi rotasi
def rotasi(sudut):
    sudut_radian = math.radians(sudut)
    def transformasi(P):
        return (P[0]*math.cos(sudut_radian) - P[1]*math.sin(sudut_radian), P[0]*math.sin(sudut_radian) + P[1]*math.cos(sudut_radian))
    return transformasi

# melakukan transformasi
P_translasi = translasi(2, -1)(P)
P_dilatasi = dilatasi(2, -1)(P)
P_rotasi = rotasi(30)(P)

print("Koordinat setelah translasi:", P_translasi)
print("Koordinat setelah dilatasi:", P_dilatasi)
print("Koordinat setelah rotasi:", P_rotasi)

# Latihan Praktikum Modul 4
# Kegiatan 5

# fungsi untuk membuat titik
def point(x, y):
    return x, y

# fungsi untuk menghitung persamaan garis
def line_equation_of(p1, p2):
    # fungsi inner untuk menghitung gradien
    def calculate_gradient(p1, p2):
        return (p2[1] - p1[1]) / (p2[0] - p1[0])

    # menghitung gradien
    M = calculate_gradient(p1, p2)

    # menghitung konstanta
    C = p1[1] - M * p1[0]

    return f"y = {M:.2f}x + {C:.2f}"

# mencetak persamaan garis
print("Persamaan garis yang melalui titik A dan B:")
print(line_equation_of(point(1, -2), point(-5, 9)))

# Latihan Praktikum Modul 4
# Kegiatan 6

# fungsi untuk membuat titik
def point(x, y):
    return x, y

# fungsi untuk menghitung persamaan garis
def line_equation_of(p1, M):
    # menghitung konstanta
    C = p1[1] - M * p1[0]

    return f"y = {M:.2f}x + {C:.2f}"

# meminta pengguna untuk memasukkan koordinat titik dan gradien
x = int(input("Masukkan koordinat x titik: "))
y = int(input("Masukkan koordinat y titik: "))
M = int(input("Masukkan gradien: "))

# mencetak persamaan garis
print("Persamaan garis yang melalui titik ({}, {}) dan bergradien {}:".format(x, y, M))
print(line_equation_of(point(x, y), M))