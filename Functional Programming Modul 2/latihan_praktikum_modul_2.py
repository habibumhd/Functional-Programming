# -*- coding: utf-8 -*-
"""Latihan Praktikum Modul 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qTxx2M7Dgofljo_3THUPtPgjwxxKjsza
"""

# Latihan Praktikum Modul 2
# Kegiatan 1

items = [
    {'name': 'Pensil', 'stock': 100},
    {'name': 'Buku', 'stock': 50},
    {'name': 'pulpen', 'stock': 10}
]

def calculate_total_stock(items):
    total_stock = 0
    for item in items:
        total_stock += item['stock']
    return total_stock

# Menghitung total stock barang
total_stock = calculate_total_stock(items)
print(f"Total stok awal: {total_stock}")

def add_stock(items, item_name, quantity):
    update = items.copy()

    for item in update:
        if item['name'] == item_name:
            item['stock'] += quantity
            print(f"Stok {item_name} ditambahkan sebanyak {quantity}. Stok saat ini: {item['stock']}")
            break
    else:
        print(f"Barang {item_name} tidak ada.")

    return update

items = add_stock(items, 'Pensil', 50)

total_stock = calculate_total_stock(items)
print(f"Total stok barang update: {total_stock}")

# Latihan Praktikum Modul 2
# Kegiatan 2

def add_expense(expenses, date, description, amount):
    new_expense = {'tanggal': date, 'deskripsi': description, 'jumlah': amount}
    # Gunakan pure-function, buat list baru yang berisi semua pengeluaran lama dan pengeluaran baru
    new_expenses = expenses + [new_expense]
    return new_expenses

# Latihan Praktikum Modul 2
# Kegiatan 3

calculate_total_expenses = lambda expenses: sum(expense['jumlah'] for expense in expenses)

# Latihan Praktikum Modul 2
# Kegiatan 4

def get_expenses_by_date(expenses, date):
    return [expense for expense in expenses if expense['tanggal'] == date]

# Latihan Praktikum Modul 2
# Kegiatan 5

def generate_expenses_report(expenses):
    for expense in expenses:
        yield f"{expense['tanggal']} - {expense['deskripsi']} - Rp {expense['jumlah']}"

# Latihan Praktikum Modul 2
# Kegiatan 6

def display_menu():
    print("\n===== Aplikasi Pencatat Pengeluaran Harian =====")
    print("1. Tambah Pengeluaran")
    print("2. Total Pengeluaran Harian")
    print("3. Lihat Pengeluaran berdasarkan Tanggal")
    print("4. Lihat Laporan Pengeluaran Harian")
    print("5. Keluar")

def add_expense_interactively(expenses):
    date = input("Masukkan tanggal pengeluaran (YYYY-MM-DD): ")
    description = input("Masukkan deskripsi pengeluaran: ")
    amount = int(input("Masukkan jumlah pengeluaran: "))
    # Panggil fungsi 'add_expense' dengan parameter expenses yang ada
    new_expenses = add_expense(expenses, date, description, amount)
    print("Pengeluaran berhasil ditambahkan.")
    return new_expenses

def view_expenses_by_date(expenses):
    date = input("Masukkan tanggal (YYYY-MM-DD): ")
    expenses_on_date = get_expenses_by_date(expenses, date)  # Panggil fungsi 'get_expenses_by_date'
    print(f"\nPengeluaran pada tanggal {date}:")
    for expense in expenses_on_date:
        print(f"{expense['deskripsi']} - Rp {expense['jumlah']}")

def view_expenses_report(expenses):
    print("\nLaporan Pengeluaran Harian:")
    expenses_report = generate_expenses_report(expenses)  # Panggil fungsi 'generate_expenses_report'
    for entry in expenses_report:
        print(entry)

def get_user_input(command):
    return int(input(command))

def main():
    global expenses
    while True:
        display_menu()
        choice = get_user_input("Pilih menu (1/2/3/4/5): ")
        if choice == 1:
            expenses = add_expense_interactively(expenses)
        elif choice == 2:
            total_expenses = calculate_total_expenses(expenses)
            print(f"\nTotal Pengeluaran Harian: Rp {total_expenses}")
        elif choice == 3:
            view_expenses_by_date(expenses)
        elif choice == 4:
            view_expenses_report(expenses)
        elif choice == 5:
            print("Terima kasih telah menggunakan aplikasi kami.")
            break
        else:
            print("Pilihan tidak valid. Silahkan pilih menu yang benar.")

if __name__ == "__main__":
    expenses = []  # Inisialisasi list expenses
    main()